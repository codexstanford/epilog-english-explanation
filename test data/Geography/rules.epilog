 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% Semantic Rules
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% recommendations
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        claim.recommendation(C,pay) :-
            plan_in_effect(C) &
            ~partial_day(C) &
            evaluate(countofall(E,exclusion(C,E)),0)

        claim.recommendation(C,decline) :- partial_day(C)
        claim.recommendation(C,decline) :- exclusion(C,E)

        plan_in_effect(C) :-
            claim.policy(C,P) &
            claim.hospitalization(C,Z) &
            policy.startdate(P,PS) &
            policy.enddate(P,PE) &
            hospitalization.startdate(Z,ZS) &
            hospitalization.enddate(Z,ZE) &
            overlap(PS,PE,ZS,ZE)

        partial_day(C) :-
            claim.hospitalization(C,Z) &
            duration(Z,DURATION) &
            less(DURATION,86400000)

        duration(Z,DURATION) :-
            hospitalization.startdate(Z,SD) &
            hospitalization.starttime(Z,ST) &
            hospitalization.enddate(Z,ED) &
            hospitalization.endtime(Z,ET) &
            datetimetotimestamp(SD,ST,SS) &
            datetimetotimestamp(ED,ET,ES) &
            evaluate(minus(ES,SS),DURATION)

        exclusion(C,4.3m) :- claim.exclusion(C,preexist)

        exclusion(C,4.3i) :-
            claim.hospitalization(C,Z) &
            hospitalization.cause(Z,X) &
            accident.activity(X,skydiving)

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% insurance-related definitions
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        person.policy(X,Y) :- policy.insuree(Y,X)
        person.policy(X,Y) :- policy.dependent(Y,X)

        person.claim(X,Y) :-
            hospitalization.patient(H,X) &
            claim.hospitalization(Y,H)

        policy.claim(X,Y) :- claim.policy(Y,X)


        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% definitions for explanation testing
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% geography-related definitions
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        same_continent(C1,C2) :- 
            country.continent(C1,X) &
            country.continent(C2,X)

        adjacent_continent_countries(C1,C2) :-
            country.continent(C1,X1) &
            country.continent(C2,X2) &
            adjacent_continent(X1,X2)

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% health insurance definitions
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        longer_hospital_stay(C1,C2) :- 
            claim.hospitalization(C1,Z1) &
            claim.hospitalization(C2,Z2) &
            duration(Z1,D1) & 
            duration(Z2,D2) & 
            less(D2,D1)

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%% general definitions and predefined relations
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        overlap(PS,PE,ZS,ZE) :-
            evaluate(stringmin(ZS,PE),ZS) &
            evaluate(stringmin(PS,ZE),PS)

        datetimetotimestamp(DATE,TIME,STAMP) :-
            evaluate(parsedate(DATE),[Y,M,D]) &
            evaluate(parsetime(TIME),[H,N,S]) &
            evaluate(maketimestamp(Y,M,D,H,N,S),STAMP)

        parsedate(DATE) :=
            map(readstring,tail(matches(stringify(DATE),"(....)_(..)_(..)")))

        parsetime(TIME) :=
            map(readstring,tail(matches(stringify(TIME),"(..)_(..)_(..)")))

        leq(X,Y) :- evaluate(min(X,Y),X)
        less(X,Y) :- evaluate(min(X,Y),X) & distinct(X,Y)

        head(X!L) := X
        tail(X!L) := L

        %%% number relations, e.g. less, greater
        %%% string relations, e.g. stringappend
        %%% date relations, e.g. dateplus
        %%% and so forth...

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%